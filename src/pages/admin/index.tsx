import { signIn, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { type ReactNode, useState } from "react";
import {
  type TProductCreateInputSchema,
  type TCategoryCreateInputSchema,
  type TMenuCreateInputSchema,
  type TRestaurantCreateInputSchema,
} from "~/schemas";
import { api } from "~/utils/api";

export default function Restaurant() {
  const session = useSession();

  const utils = api.useContext();

  const myRestaurants = api.restaurant.getMine.useQuery(undefined, {
    enabled: session.status === "authenticated",
  });

  // Create RESTAURANT
  const createRestaurant = api.restaurant.create.useMutation({
    onSuccess: () => utils.restaurant.getMine.invalidate(),
  });

  const [rFormData, setRFormData] = useState<TRestaurantCreateInputSchema>({
    name: "La Farola de Cabildo",
    slug: "la-farola-de-cabildo",
    address: "Cabildo 2030",
    description: "Bodegón porteño",
    image:
      "http://brefexsa.com/wp-content/uploads/2020/03/la_farola_logo-300x134.png",
  });
  // Delete RESTAURANT
  const deleteRestaurant = api.restaurant.delete.useMutation({
    onSuccess: () => utils.restaurant.getMine.invalidate(),
  });

  // Create MENU
  const createMenu = api.menu.create.useMutation({
    onSuccess: () => utils.restaurant.getMine.invalidate(),
  });
  const [mFormData, setMFormData] = useState<
    Omit<TMenuCreateInputSchema, "restaurantId">
  >({
    name: "",
    description: "",
  });

  // Create CATEGORY
  const createCategory = api.category.create.useMutation({
    onSuccess: () => utils.restaurant.getMine.invalidate(),
  });
  const [cFormData, setCFormData] = useState<
    Omit<TCategoryCreateInputSchema, "menuId">
  >({
    name: "",
    description: "",
    image: "",
  });

  // Create PRODUCT
  const createProduct = api.product.create.useMutation({
    onSuccess: () => utils.restaurant.getMine.invalidate(),
  });
  const [pFormData, setPFormData] = useState<
    Omit<TProductCreateInputSchema, "categoryId">
  >({
    name: "",
    price: "",
    description: "",
    image: "",
  });

  if (session.status === "unauthenticated") {
    return (
      <button
        type="button"
        className="inline-flex items-center border border-transparent bg-indigo-600 px-3 py-2 text-sm font-medium leading-4 text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
        onClick={() => void signIn("google")}
      >
        <svg
          className="-ml-0.5 mr-2 h-4 w-4"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
          aria-hidden="true"
        >
          <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
          <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
        </svg>
        Google Login
      </button>
    );
  }

  return (
    <>
      <Head>
        <title>Panel de Administración - RestoMenuQR</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c] font-mono">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          {myRestaurants.data?.map((r) => (
            <Card key={r.id}>
              <div className="mb-8 flex items-center justify-between text-3xl font-semibold text-gray-900">
                <span>{r.name}</span>
                <button
                  className="float-right bg-red-500 px-4 py-2 text-base font-bold"
                  onClick={() => deleteRestaurant.mutate({ id: r.id })}
                >
                  BORRAR RESTAURANT
                </button>
              </div>
              {r.menu.map((m) => (
                <Card key={m.id}>
                  <div>{m.name}</div>
                  <div className="my-4 h-0.5 w-full bg-slate-400" />
                  {m.category.map((c) => (
                    <Card key={c.id}>
                      <div>
                        {c.name} {c.image && <>[{c.image}]</>}
                      </div>

                      <Card>
                        <div className="divide-y-2">
                          {c.product.map((p) => (
                            <div
                              key={p.id}
                              className={`flex items-center space-x-4 p-2 ${
                                p.featured
                                  ? "bg-slate-600 font-bold text-slate-100"
                                  : ""
                              }`}
                            >
                              {p.image && (
                                <div>
                                  <Image
                                    src={p.image}
                                    alt={p.name}
                                    width={50}
                                    height={50}
                                    unoptimized
                                    className="border border-slate-400"
                                  />
                                </div>
                              )}
                              <div>
                                {p.name} (<strong>{p.price} ARS</strong>)
                              </div>
                            </div>
                          ))}
                        </div>
                      </Card>
                      {Object.entries(pFormData).map(([field, value]) => (
                        <input
                          className="border border-slate-200"
                          key={field}
                          value={value}
                          placeholder={field}
                          onChange={(e) =>
                            setPFormData((prev) => ({
                              ...prev,
                              [field]: e.target.value,
                            }))
                          }
                        />
                      ))}
                      <button
                        className="bg-green-500 px-4 py-2 text-base font-bold uppercase"
                        onClick={() =>
                          createProduct.mutate({
                            ...pFormData,
                            categoryId: c.id,
                          })
                        }
                      >
                        Crear Producto
                      </button>
                    </Card>
                  ))}
                  <Card>
                    <h1 className="text-3xl font-bold">Crear Categoría</h1>
                    {Object.entries(cFormData).map(([field, value]) => (
                      <input
                        className="border border-slate-200"
                        key={field}
                        value={value}
                        placeholder={field}
                        onChange={(e) =>
                          setCFormData((prev) => ({
                            ...prev,
                            [field]: e.target.value,
                          }))
                        }
                      />
                    ))}
                    <button
                      className="bg-green-500 px-4 py-2 text-base font-bold uppercase"
                      onClick={() =>
                        createCategory.mutate({ ...cFormData, menuId: m.id })
                      }
                    >
                      Crear Categoría
                    </button>
                  </Card>
                </Card>
              ))}
              <Card>
                <h1 className="text-3xl font-bold ">Crear Menu</h1>
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
                  {Object.entries(mFormData).map(([field, value]) => (
                    <input
                      className="border border-slate-200"
                      key={field}
                      value={value}
                      placeholder={field}
                      onChange={(e) =>
                        setMFormData((prev) => ({
                          ...prev,
                          [field]: e.target.value,
                        }))
                      }
                    />
                  ))}
                  <button
                    className="bg-green-500 px-4 py-2 text-base font-bold uppercase"
                    onClick={() =>
                      createMenu.mutate({ ...mFormData, restaurantId: r.id })
                    }
                  >
                    Crear Menu
                  </button>
                </div>
              </Card>
            </Card>
          ))}
          <h1 className="text-4xl font-bold text-white">Crear Restaurant</h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            {Object.entries(rFormData).map(([field, value]) => (
              <input
                key={field}
                value={value}
                placeholder={field}
                onChange={(e) =>
                  setRFormData((prev) => ({ ...prev, [field]: e.target.value }))
                }
              />
            ))}
            <button
              className="bg-green-500 px-4 py-2 text-base font-bold uppercase"
              onClick={() => createRestaurant.mutate(rFormData)}
            >
              Crear Restaurant
            </button>
          </div>
        </div>
      </main>
    </>
  );
}

const Card = ({ children }: { children: ReactNode }) => {
  return (
    <div className="mb-4 w-full border border-slate-700 bg-white p-4">
      {children}
    </div>
  );
};
